[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Package Essentials",
    "section": "",
    "text": "About this\nThis is a book on the essential components of creating an R package. It is aimed at those who want to learn how to make R packages. You probably have written some functions, but if you haven’t, we discuss how to do that. I care a lot about writing functions, and have a lot of thoughts and ideas on how to do it.\nIt was initially developed as a full-day hour workshop, “R package essentials”. It is a developed into a resource that will grow and change over time as a living book.\nThis book aims to teach the following:",
    "crumbs": [
      "About this"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-book",
    "href": "index.html#how-to-use-this-book",
    "title": "R Package Essentials",
    "section": "How to use this book",
    "text": "How to use this book\nThis book was written to provide course materials for a 8 hour course on R Packages\nWe worked through the following sections in the book in 8 hours:\n\nwhy R packages\nwhy functions\ninstallation\nwhat is RStudio?\nsuggested workflow and hygiene\n\n\nWith the remaining sections being used as extra material, or have since been written after the course:",
    "crumbs": [
      "About this"
    ]
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "R Package Essentials",
    "section": "Licence",
    "text": "Licence\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.",
    "crumbs": [
      "About this"
    ]
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "License",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.",
    "crumbs": [
      "License"
    ]
  },
  {
    "objectID": "philosophy.html",
    "href": "philosophy.html",
    "title": "1  Philosophy",
    "section": "",
    "text": "I first learnt to write an R package from [Hilary Parker’s famous blog post, “Writing an R package from scratch”. Then I consulted Hadley Wickham’s “R packages” book (1st edition). I consider the “R packages” book (now in its second edition, by Hadley Wickham and Jenny Bryan), to be the authority on best practices for package development, alongside the rOpenSci guide, “rOpenSci Packages: Development, Maintenance, and Peer Review”, by Salmon et al. \nThese are excellent pieces of reference test, however I think there is a need for a resource that sits somewhere between a blog post on making an R package, and resource. I want something that contains just enough information to get you started on the right path to making an R package. This is what that book represents to me. Along the way I’ll include breadcrumbs to other resources to look into when you want to learn more.\nThis book also represents my efforts to explain the key parts of what I think people should know about how to write functions, and also to format this in a teachable way that can be covered in a single workshop.\nThere are more comprehensive guides, and other guides out there for writing R packages. It has been the fundamental way people have shared code and ideas. So I want to share some resources I really enjoyed and think are great:\n\n\n\n\nSo, why write a book?\n\nSimilar to my book, “Quarto for Scientists”, writing this as a book provides a nice way to structure the content in the form of a workshop, in a way suitable for learning in a day. It is not to say that there aren’t already the resources out there; there are. It is instead adding to the list of other (useful, hopefully!) information out there on the internet. To answer a question with another question: “Why NOT write this as a book?”",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Philosophy</span>"
    ]
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "2  Installation",
    "section": "",
    "text": "2.1 Overview\nIn this section, the aim is to have everyone setup with R, RStudio, the tools you need to build an R package, and git.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "installation.html#overview",
    "href": "installation.html#overview",
    "title": "2  Installation",
    "section": "",
    "text": "Duration 15 minutes",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "installation.html#questions",
    "href": "installation.html#questions",
    "title": "2  Installation",
    "section": "2.2 Questions",
    "text": "2.2 Questions\n\nHow do I install R?\nHow do I install RStudio\n\nWhat about Positron?\n\nHow do I install git?\nHow do I install RTools?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "installation.html#software-setup",
    "href": "installation.html#software-setup",
    "title": "2  Installation",
    "section": "2.3 Software Setup",
    "text": "2.3 Software Setup\n\n2.3.1 Installing R\n\nWindowsMacOSLinux\n\n\nhttps://cloud.r-project.org/bin/windows/\n\n\nhttps://cloud.r-project.org/bin/macosx/\n\n\nhttps://cloud.r-project.org/bin/linux/\n\n\n\n\n\n2.3.2 Installing RStudio\nhttps://posit.co/download/rstudio-desktop/#download\n\n\n2.3.3 Installing R packages for development\nTo ensure you are up to date, run the following script to install the packages.\n\ninstall.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\", \"pak\"))\n\n\n2.3.3.1 Personalising your R Profile\nThis is really neat, and I think it’s actually worthwhile doing, but it does take up some time, and there are some warnings.\nAs you develop R packages, you’ll need to go through a cycle of restarting R, and loading things up to be ready. One of the issues with this is that you’ll find yourself writing code like:\n\nlibrary(devtools)\n\nA lot. To save you time, we can edit a very special file called “The R profile”, which is saved as .RProfile. This code is special, and awesome, because it is run every time you start R. It is also dangerous, for exactly the same reason.\nI recommend running the following code from devtools to help set this up:\nuse_devtools()\nWhich will bring up the following message:\n☐ Include this code in .Rprofile to make devtools\n  available in all interactive sessions:\n  if (interactive()) {\n    suppressMessages(require(devtools))\n  }\n  [Copied to clipboard]\n☐ Modify /Users/nick/.Rprofile.\n☐ Restart R for changes to take effect.\nSo, copy and paste the above, which I will now explain. There are three parts to this that I will break down:\nrequire(devtools)\nwe usually recommend writing library(devtools), but in this instance, require is what we want, because if the package is not installed, require will throw a warning, rather than an error:\n\n# warn\nrequire(whatevenisthis)\n\nLoading required package: whatevenisthis\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'whatevenisthis'\n\n# error\nlibrary(whatevenisthis)\n\nError in library(whatevenisthis): there is no package called 'whatevenisthis'\n\n\nWe do not want an error when we start R, it is annoying.\nsuppressMessages()\nThis code suppresses any messages that appear from running this code, which again, we want, because we don’t (generally) want our R session to announce something upon startup.\n  if (interactive()) {\n    suppressMessages(require(devtools))\n  }\nThis means that this code is only run if the R session is interactive. This always felt a bit strange to me - because I had only ever run R interactively. But you don’t want to run require(devtools) when we aren’t using R interactively, because it means we are potentially changing the state of things. Essentially, it’s good practice.\nAlso, here are a couple of times that you might not realise you are using R non-interactively:\n\nrendering a document using quarto or rmarkdown\nbuilding an R package (which you’ll learn about later)\n\nYou also use R non-interactively when you are running Rscript in the command line.\nFinally, another bit of useful code in your R profile is something like this:\n# usethis options\noptions(\n  usethis.full_name = \"Nicholas Tierney\",\n  usethis.protocol = \"https\",\n  usethis.description = list(\n    `Authors@R` = '\n    c(\n      person(\n        given = \"Nicholas\",\n        family = \"Tierney\",\n        role = c(\"aut\", \"cre\"),\n        email = \"nicholas.tierney@gmail.com\",\n        comment = c(ORCID = \"https://orcid.org/0000-0003-1460-8722\")\n      )\n    )',\n    License = \"MIT + file LICENSE\",\n    Language = \"en-GB\",\n    Version = \"0.0.0.9000\"\n  ),\n  # set SI to true\n  reprex.session_info = TRUE\n)\nThis helps when setting up your R package for the first time, to make sure you set up your DESCRIPTION file. It isn’t required, but it is neat, and I think worthwhile.\nBecause I need to set these things up on different laptops sometimes, I actually write all these files to github. They are typically called “dotfiles” - you can see mine at http://github.com/njtierney/dotfiles.\n\n\n\n2.3.4 git and github\nVery briefly, git is essentially a way of managing versions and changes. You can think of it like a product such as dropbox, but with super powers. You can go back in time, you can make copies for changing, and delicately and precisely mege them back in, or leave them where they are.\nYour software needs a home. You’ll typically start with your project on your laptop or computer. GitHub is where you can store it online. The benefits to sharing your work on github are many, but my personal top reasons are:\n\nBuild trust in your software. If the community can see your code, they can trust it better.\nProvides a way to log ideas and bugs via issues.\nProvides a way for the community to contribute to your code.\n\nMy favourite book on using git and github with R is the book “happy git with R” By Jenny Bryan, Jim Hester, and the Stat 545 TAs. Honestly, it’s hard to recommend better installation instructions than their battle tested ones, so I’ll point you to this resource in case you run into troubles here.\n\n2.3.4.1 setting up github\nGetting set up on github you need an account. It’s easy enough to set up - go to https://github.com/ . When picking a username, I recommend the following:\n\nKeep it short. jsmith is better than jonathansmith.\nAvoid numbers and jokes. jsmith is better than jsmith123\nKeep it professional. jsmithisthebest\nKeep it lowercase\n\n\n\n2.3.4.2 installing git\nInstalling git can sometimes be a challenge. This is largely because there are different ways to install it on windows vs mac vs linux. As states earlier, the best, most battle tested instructions are at https://happygitwithr.com/install-git.\nOnce you’ve installed git, I recommend running this:\n\nusethis::git_vaccinate()\n\n✔ Configuring 'core.excludesFile': '~/.gitignore'\n\n\n✔ Creating the global (user-level) gitignore: '~/.gitignore'\n\n\n✔ Adding \".Rproj.user\", \".Rhistory\", \".Rdata\", \".httr-oauth\", \".DS_Store\", and\n  \".quarto\" to '/home/runner/.gitignore'.\n\n\nWhich ensures that you ignore specific files (specifically, Rproj.user, .Rhistory, .Rdata, .httr-oauth, .DS_Store, and .quarto). This is important because it decreases your chances of leaking credentials or other important details to GitHub.\n\n\n2.3.4.3 The “git handshake”\nIn order for your computer to talk to git and github properly, it needs to know three things:\n\nName\nEmail\nCredentials\n\ngit needs to know your name and email - this should be the name and email you used to set up your github account. Set this up with use_git_config()\n\nlibrary(usethis)\nuse_git_config(\n  user.name = \"Ned Kelly\", \n  user.email = \"ned@example.org\"\n)\n\ngithub needs a personal access token - this is so you can talk to github from R. This becomes really handy, and dare I say it, nearly magical later on. To get this, run:\nusethis::create_github_token()\nThis will open up GitHub and create a Personal Access Token. If this doesn’t work, go to https://github.com/settings/tokens and click “Generate New Token”, and select the (classic).”\nGenerally speaking you want the following scopes selected: “repo”, “user”, and “workflow”.\nA token will be created - keep this page open, and copy the token to your clipboard.\nThen, go to R, and run:\ngitcreds::gitcreds_set()\nAnd paste this PAT code in. Then, verify all of this with:\nusethis::git_sitrep()\n\n\n\n2.3.5 Installing RTools\nThis is actually something that you only need to do if you want to use C or C++ with your R package, which isn’t something you need to do for this course. To read more on this, see “The R build toolchain” from the R Packages book.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "rstudio.html",
    "href": "rstudio.html",
    "title": "3  RStudio, What and Why",
    "section": "",
    "text": "3.1 Overview\n(This section is also in my other book, “Quarto for Scientists”)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RStudio, What and Why</span>"
    ]
  },
  {
    "objectID": "rstudio.html#overview",
    "href": "rstudio.html#overview",
    "title": "3  RStudio, What and Why",
    "section": "",
    "text": "Teaching 5 minutes\nExercises 2 minutes",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RStudio, What and Why</span>"
    ]
  },
  {
    "objectID": "rstudio.html#questions",
    "href": "rstudio.html#questions",
    "title": "3  RStudio, What and Why",
    "section": "3.2 Questions",
    "text": "3.2 Questions\n\nWhat is RStudio?\nWhy should I use RStudio?\nWhat features should I change?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RStudio, What and Why</span>"
    ]
  },
  {
    "objectID": "rstudio.html#objectives",
    "href": "rstudio.html#objectives",
    "title": "3  RStudio, What and Why",
    "section": "3.3 Objectives",
    "text": "3.3 Objectives\n\nGet familiarised with RStudio\nGet set up with not storing the RStudio workspace\nDownload the course materials for the workshop",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RStudio, What and Why</span>"
    ]
  },
  {
    "objectID": "rstudio.html#what-is-rstudio-and-why-should-i-use-it",
    "href": "rstudio.html#what-is-rstudio-and-why-should-i-use-it",
    "title": "3  RStudio, What and Why",
    "section": "3.4 What is RStudio, and why should I use it?",
    "text": "3.4 What is RStudio, and why should I use it?\n\nIf R is the engine and bare bones of your car, then RStudio is like the rest of the car.\n\nThe engine is super critical part of your car. But in order to make things properly functional, you need to have a steering wheel, comfy seats, a radio, rear and side view mirrors, storage, and seatbelts. RStudio is all those niceties\nThe RStudio layout has the following features:\n\nOn the upper left, the Quarto script\nOn the lower left, the R console\nOn the lower right, the view for files, plots, packages, help, and viewer.\nOn the upper right, the environment / history pane\n\n\n\n\n\n\nA screenshot of the RStudio working environment.\n\n\n\n\nWe saw a bit of what an Quarto script does.\n\nThe R console is the bit where you can run your code.\nThe file/plot/package viewer is a handy browser for your current files, like Finder, or File Explorer.\nPlots are where your plots appear, you can view packages, see the help files.\nThe environment / history pane contains the list of things you have created, and the past commands that you have run.\n\n\n\n\n\n\n\nYour Turn: RStudio default options\n\n\n\nTo first get set up, I highly recommend changing the following setting\nTools &gt; Global Options (or Cmd + , on macOS)\nUnder the General tab:\n\nFor workspace:\n\nUncheck restore .RData into workspace at startup.\nSave workspace to .RData on exit : “Never”.\n\nFor History:\n\nUncheck “Always save history (even when not saving .RData).\nUncheck “Remove duplicate entries in history”.\n\n\n\n\n\nSetting the options right for RStudio, so you don’t restore previous sessions work, and don’t save it either.\n\n\nThis means that you won’t save the objects and other things that you create in your R session and reload them. This is important for two reasons\n\nReproducibility: you don’t want to have objects from last week cluttering your session\nPrivacy: you don’t want to save private data or other things to your session. You only want to read these in.\n\nYour “history” is the commands that you have entered into R.\nAdditionally, not saving your history means that you won’t be relying on things that you typed in the last session, which is a good habit to get into!",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RStudio, What and Why</span>"
    ]
  },
  {
    "objectID": "rstudio.html#learning-more",
    "href": "rstudio.html#learning-more",
    "title": "3  RStudio, What and Why",
    "section": "3.5 Learning more",
    "text": "3.5 Learning more\n\nRStudio IDE cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>RStudio, What and Why</span>"
    ]
  },
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "4  Workflow",
    "section": "",
    "text": "4.1 Overview\n(Note that this section is borrowed from my book, Quarto for Scientists: “workflow”)\nWe can prevent unexpected problems if we can maintain an order to your files, paths, and directories. A common problem that arises is R not knowing where a certain file is. For example, we get the error:\nBecause R doesn’t know where \"my-very-important-data-file-somewhere.csv\" is.\nPracticing good file storage hygiene will help maintain an order to files, paths, and directories. This will make you more productive in the future, because you’ll spend less time fighting against file paths.\nNot sure what a file path is? We explain that as well.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#overview",
    "href": "workflow.html#overview",
    "title": "4  Workflow",
    "section": "",
    "text": "Teaching 10 minutes\nExercises 10 minutes",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#questions",
    "href": "workflow.html#questions",
    "title": "4  Workflow",
    "section": "4.2 Questions",
    "text": "4.2 Questions\n\nWhere should I put all my files?\nWhat is an RStudio project, anyway?\nWhat is a file path?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#objectives",
    "href": "workflow.html#objectives",
    "title": "4  Workflow",
    "section": "4.3 Objectives",
    "text": "4.3 Objectives\n\nUnderstand what a file path is\nSet up an RStudio Project to organise your work\nPut some data in your project to set up the next tasks\n\n\n\n\n\n\n\nYour Turn\n\n\n\nIn groups of 2-4 discuss:\n\nWhat your normal “workflow” is for starting a new project\nPossible challenges that might arise when maintaining your project",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#when-you-start-a-new-project-open-a-new-rstudio-project",
    "href": "workflow.html#when-you-start-a-new-project-open-a-new-rstudio-project",
    "title": "4  Workflow",
    "section": "4.4 When you start a new project: Open a new RStudio project",
    "text": "4.4 When you start a new project: Open a new RStudio project\nThis section is heavily influenced by Jenny Bryan’s great blog post on project based workflows.\nSometimes this is the first line of an R Script or R markdown file.\nsetwd(\"c:/really/long/file/path/to/this/directory\")\n\n\n\n\n\n\nQuestion\n\n\n\nWhat do you think the setwd code does?\n\n\n\n4.4.1 So what does this do?\nThis says, “set my working directory to this specific working directory”.\nIt means that you can read in data and other things like this:\ndata &lt;- read_csv(\"data/mydata.csv\")\nInstead of\ndata &lt;- read_csv(\"c:/really/long/file/path/to/this/directory/data/mydata.csv\")\nSo while this has the effect of making the file paths work in your file, it is a problem. It is a problem because, among other things, using setwd() like this:\n\nHas 0% chance of working on someone else’s machine (this could include you in 6 months!)\nYour file is not self-contained and portable. (Think: “What if this folder moved to /Downloads, or onto another machine?”)\n\nSo, to get this to work, you need to hand edit the file path to your machine.\nThis is painful.\nWhen you do this all the time, it gets old, fast.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#what-is-a-file-path",
    "href": "workflow.html#what-is-a-file-path",
    "title": "4  Workflow",
    "section": "4.5 What is a file path?",
    "text": "4.5 What is a file path?\nThis might all be a bit confusing if you don’t know what a file path is. A file path is the machine-readable directions to where files on your computer live. So, the file path:\n/Users/njtierney/Desktop/qmd4sci-materials/demo.R\nDescribes the location of the file “demo.R”. This could be visualised as:\nusers\n  └── njtierney\n      └── Desktop\n          └──  qmd4sci-materials\n               └── demo.R &lt;&lt; THIS IS THE FILE HERE\n               └── exercises\n               └── exploratory-data-analysis\n                   └── eda-document.qmd\n                   └── eda-script.R\n               └──  data\n                    └──  gapminder.csv\nSo, if you want to read in the gapminder.csv file, you might need to write code like this:\ngapminder &lt;- read_csv(\"/Users/njtierney/Desktop/qmd4sci-materials/data/gapminder.csv\")\nAs we now know, this is a problem, because this is not portable code. It is unlikely someone else will have the gapminder.csv data stored under the folders, \"Users/njtierney/Desktop\".\nIf you have an RStudio project file inside the qmd4sci-materials folder, you can instead write the following:\ngapminder &lt;- read_csv(\"data/gapminder.csv\")\n\n\n\n\n\n\nYour Turn\n\n\n\n\n(1-2 minutes) Imagine you see the following directory path: \"/Users/miles/etc1010/week1/data/health.csv\" what are the folders above the file, health.csv?\nWhat would be the result of using the following code in demo-gapminder.qmd, and then using the code, and then moving this to another location, say inside your C drive?\n\nsetwd(\"Downloads/etc1010/week1/week1.qmd)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#is-there-an-answer-to-the-madness",
    "href": "workflow.html#is-there-an-answer-to-the-madness",
    "title": "4  Workflow",
    "section": "4.6 Is there an answer to the madness?",
    "text": "4.6 Is there an answer to the madness?\nThis file path situation is a real pain. Is there an answer to the madness?\nThe answer is yes!\nI highly recommend when you start on a new idea, new research project, paper. Anything that is new. It should start its life as an rstudio project.\nAn rstudio project helps keep related work together in the same place. Amongst other things, they:\n\nKeep all your files together.\nSet the working directory to the project directory.\nStarts a new session of R.\nRestore previously edited files into the editor tabs.\nRestore other rstudio settings.\nAllow for multiple R projects open at the same time.\n\nThis helps keep you sane, because:\n\nYour projects are each independent.\nYou can work on different projects at the same time.\nObjects and functions you create and run from project idea won’t impact one another.\n\nYou can refer to your data and other projects in a consistent way.\n\nAnd finally, the big one:\nRStudio projects help resolve file path problems, because they automatically set the working directory to the location of the rstudio project.\nLet’s open one together.\n\n\n\n\n\n\nYour Turn Use your own rstudio project\n\n\n\n\nIn RStudio, and run the following code to start a new rstudio project called “qmd4sci-materials”.\n\nusethis::use_course(\"njtierney/qmd4sci-materials\")\n\nFollow the prompts to download this to your desktop and then run the rstudio project. (You can move it later if you like!)\nYou are now in an rstudio project!\n\n\n\n\n\n\n\n\n\nYour Turn: open the demo.R file\n\n\n\n\nRun the code inside the demo.R file\nWhy does the read_csv code work?\nRun the code inside the exploratory-data-analysis folder - eda-script.R.\nDoes the read_csv code work?\nRun the code inside the exploratory-data-analysis folder - eda-document.qmd, by clicking the “render” button (we’ll go into this in more detail soon!)\nDoes it work?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#the-here-package",
    "href": "workflow.html#the-here-package",
    "title": "4  Workflow",
    "section": "4.7 The “here” package",
    "text": "4.7 The “here” package\nAlthough RStudio projects help resolve file path problems, in some cases you might have many folders in your r project. To help navigate them appropriately, you can use the here package to provide the full path directory, in a compact way.\nhere::here(\"data\")\nreturns\n[1] \"/Users/nick/github/njtierney/qmd4sci-materials/data\"\nAnd\nhere::here(\"data\", \"gapminder.csv\")\nreturns\n[1] \"/Users/nick/github/njtierney/qmd4sci-materials/data/gapminder.csv\"\n(Note that these absolute file paths will indeed be different on my computer compared to yours - super neat!)\nYou can read the above here code as:\n\nIn the folder data, there is a file called gapminder.csv, can you please give me the full path to that file?\n\nThis is really handy for a few reasons:\n\nIt makes things completely portable\nQuarto documents have a special way of looking for files, this helps eliminate file path pain.\nIf you decide to not use RStudio projects, you have code that will work on any machine",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#remember",
    "href": "workflow.html#remember",
    "title": "4  Workflow",
    "section": "4.8 Remember",
    "text": "4.8 Remember\n\nIf the first line of your R script is\n\nsetwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")\n\nI will come into your office and SET YOUR COMPUTER ON FIRE 🔥.\n\n– Jenny Bryan\n\n\n\n\n\n\nAside: Creating an RStudio project\n\n\n\n\n\nYou can create an Rstudio project by going to:\nfile &gt; new project &gt; new directory &gt; new project &gt; name your project &gt; create project.\nYou can also click on the create project button in the top left corner\n\n\n\n\n\n\n\n\n\nThen go to new directory, if it is a new folder - otherwise if you have an existing folder you have - click on existing directory.\n\n\n\n\n\n\n\n\n\nThen go to new project\n\n\n\n\n\n\n\n\n\nThen write the name of your project. I think it is usually worthwhile spending a bit of time thinking of a name for your project. Even if it is only a few minutes, it can make a difference. You want to think about:\n\nKeeping it short.\nNo spaces.\nCombining words.\n\nFor example, I had a project looking at bat calls, so I called it screech, because bats make a screech-y noise. But maybe you’re doing some global health analysis so you call it “world-health”.\nAnd click “create project”.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "why-functions.html",
    "href": "why-functions.html",
    "title": "5  Why functions?",
    "section": "",
    "text": "5.1 Overview\nAt their core, an R package is a way to share code. The way we share that code is primarily through R functions. There is a lot about the mechanics, and the tools to create and write R packages, but what I want to communicate here is the why, when, and how of using functions.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Why functions?</span>"
    ]
  },
  {
    "objectID": "why-functions.html#overview",
    "href": "why-functions.html#overview",
    "title": "5  Why functions?",
    "section": "",
    "text": "Teaching 20 minutes\nExercises 15 minutes",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Why functions?</span>"
    ]
  },
  {
    "objectID": "why-functions.html#questions",
    "href": "why-functions.html#questions",
    "title": "5  Why functions?",
    "section": "5.2 Questions",
    "text": "5.2 Questions\n\nWhy should I use a function?\nWhen should I use a function?\nHow do I create a function?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Why functions?</span>"
    ]
  },
  {
    "objectID": "why-functions.html#objectives",
    "href": "why-functions.html#objectives",
    "title": "5  Why functions?",
    "section": "5.3 Objectives",
    "text": "5.3 Objectives\n\nUnderstand why functions should be used\nUnderstand when do use functions\nUnderstand how to write functions",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Why functions?</span>"
    ]
  },
  {
    "objectID": "motivation.html",
    "href": "motivation.html",
    "title": "6  Motivation",
    "section": "",
    "text": "We’ve gone through a lot of setup, and now we’re going to start building an R package. Soon. But we need to have some motivation, first. It involves a bit of a story, and a bit of imagination.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Motivation</span>"
    ]
  }
]